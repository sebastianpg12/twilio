// app.js - Backend para WhatsApp Business con IA y MongoDB
console.log('üîß [SERVER.JS] Iniciando servidor...');
console.log('üìÇ Directorio de trabajo:', process.cwd());
console.log('üîë Verificando variables de entorno...');

require('dotenv').config();

// Verificar variables de entorno cr√≠ticas
const requiredEnvVars = ['TWILIO_SID', 'TWILIO_AUTH_TOKEN', 'OPENAI_API_KEY', 'MONGODB_URI'];
const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);

if (missingVars.length > 0) {
  console.error('‚ùå Variables de entorno faltantes:', missingVars);
  console.error('üîç Variables disponibles:', Object.keys(process.env).filter(key => key.startsWith('TWILIO') || key.startsWith('OPENAI') || key.startsWith('MONGODB')));
  process.exit(1);
} else {
  console.log('‚úÖ Variables de entorno configuradas correctamente');
}

const express = require('express');
const bodyParser = require('body-parser');
const twilio = require('twilio');
const cors = require('cors');

// Importar servicios y configuraci√≥n
const database = require('./src/config/database');
const ConversationService = require('./src/services/conversationService');
const { preguntarIA, respuestaInteligente } = require('./src/services/aiService');
const Client = require('./src/models/Client');

// Importar rutas
const conversationsRoutes = require('./src/routes/conversations');
const statsRoutes = require('./src/routes/stats');
const clientsRoutes = require('./src/routes/clients');
const dashboardRoutes = require('./src/routes/dashboard');
const setupRoutes = require('./src/routes/setup');
const adminRoutes = require('./src/routes/admin');
const usersRoutes = require('./src/routes/users');
const knowledgeRoutes = require('./src/routes/knowledge');

const app = express();

// Configuraci√≥n de CORS
const allowedOrigins = [
  'http://localhost:3000',      // Backend local
  'http://localhost:5173',      // Vite dev server por defecto
  'http://localhost:5174',      // Vite dev server alternativo
  'http://localhost:8080',      // Webpack dev server
  'http://127.0.0.1:5173',      // Alternativa local IP
  'http://127.0.0.1:5174',      // Alternativa local IP
  'https://twilio-9ubt.onrender.com', // Producci√≥n
];

app.use(cors({
  origin: function (origin, callback) {
    // Permitir requests sin origin (como Postman) en desarrollo
    if (!origin) return callback(null, true);
    
    if (allowedOrigins.indexOf(origin) !== -1) {
      callback(null, true);
    } else {
      console.log('‚ùå CORS: Origin no permitido:', origin);
      callback(new Error('No permitido por CORS'), false);
    }
  },
  credentials: true
}));

// Middlewares
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

// Configuraci√≥n de Twilio
const accountSid = process.env.TWILIO_SID;
const authToken = process.env.TWILIO_AUTH_TOKEN;
const twilioClient = twilio(accountSid, authToken);
const twilioPhoneNumber = process.env.TWILIO_PHONE_NUMBER || 'whatsapp:+14155238886';

console.log('üìû N√∫mero de WhatsApp configurado:', twilioPhoneNumber);

// ===============================================
// ENDPOINT PARA VERIFICAR ESTADO DE MENSAJES TWILIO
// ===============================================

// Verificar estado de un mensaje espec√≠fico
app.get('/api/message-status/:twilioSid', async (req, res) => {
  try {
    const { twilioSid } = req.params;
    
    const message = await twilioClient.messages(twilioSid).fetch();
    
    res.json({
      success: true,
      message: {
        sid: message.sid,
        status: message.status,
        direction: message.direction,
        from: message.from,
        to: message.to,
        body: message.body,
        errorCode: message.errorCode,
        errorMessage: message.errorMessage,
        dateCreated: message.dateCreated,
        dateUpdated: message.dateUpdated,
        dateSent: message.dateSent
      }
    });
  } catch (error) {
    console.error('Error obteniendo estado del mensaje:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint para verificar n√∫meros autorizados en WhatsApp Sandbox
app.get('/api/whatsapp/sandbox-info', async (req, res) => {
  try {
    // Para el sandbox de Twilio, todos los n√∫meros deben estar pre-autorizados
    // enviando primero el c√≥digo "join <sandbox-keyword>" al n√∫mero sandbox
    
    res.json({
      success: true,
      sandbox: {
        number: '+14155238886',
        format: 'whatsapp:+14155238886',
        instructions: [
          '1. Env√≠a "join <keyword>" al n√∫mero +1 415 523 8886 desde WhatsApp',
          '2. El keyword espec√≠fico se obtiene del dashboard de Twilio',
          '3. Una vez autorizado, podr√°s recibir mensajes del sandbox',
          '4. Los n√∫meros no autorizados NO recibir√°n mensajes'
        ],
        note: 'Este es un n√∫mero sandbox de Twilio. Para producci√≥n necesitas un n√∫mero verificado.'
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Variables globales
let autoResponseEnabled = true;

// ========== FUNCIONES AUXILIARES ==========

async function ensureMarketTechExists() {
  try {
    let marketTech = await Client.findByTwilioNumber('+14155238886');
    if (!marketTech) {
      console.log('üè¢ Creando cliente MarketTech por defecto...');
      marketTech = await Client.createDefaultMarketTech();
      console.log('‚úÖ Cliente MarketTech creado:', marketTech.name);
    }
    return marketTech;
  } catch (error) {
    console.error('‚ùå Error asegurando MarketTech:', error);
    throw error;
  }
}

// ========== WEBHOOK PRINCIPAL ==========

app.post('/webhook', async (req, res) => {
  try {
    const incomingMessage = req.body.Body || '';
    const fromNumber = req.body.From || '';
    const toNumber = req.body.To || '';

    console.log(`üì© Mensaje recibido de ${fromNumber} para ${toNumber}: "${incomingMessage}"`);

    // Procesar mensaje y obtener cliente
    const result = await ConversationService.processIncomingMessage(
      toNumber, 
      fromNumber, 
      incomingMessage
    );

    const { conversation, message, client: marketTechClient } = result;

    // CONTROL DE IA: Solo responde la IA si est√° activa por conversaci√≥n
    const convKey = marketTechClient ? `${marketTechClient._id}:${fromNumber}` : null;
    const iaEnabled = convKey && iaConversationStatus[convKey] !== undefined ? iaConversationStatus[convKey] : true;

    if (iaEnabled) {
      console.log('ü§ñ Generando respuesta IA...');
      try {
        const aiResponse = await respuestaInteligente(
          incomingMessage, 
          fromNumber,
          marketTechClient
        );
        if (aiResponse && aiResponse.trim()) {
          // Enviar respuesta usando cliente de Twilio
          const messageResponse = await twilioClient.messages.create({
            from: twilioPhoneNumber,
            to: fromNumber,
            body: aiResponse
          });
          // Guardar respuesta en BD
          await ConversationService.saveOutgoingMessage(
            fromNumber,
            marketTechClient._id,
            aiResponse,
            'ai-auto'
          );
          console.log(`‚úÖ Respuesta IA enviada a ${fromNumber}`);
        }
      } catch (aiError) {
        console.error('‚ùå Error generando respuesta IA:', aiError);
      }
    } else {
      console.log('üîï IA desactivada: solo responde el asesor humano.');
    }

    res.status(200).send('OK');
  } catch (error) {
    console.error('‚ùå Error en webhook:', error);
    res.status(500).send('Error procesando mensaje');
  }
});

// ========== RUTAS API ==========

// Rutas de administraci√≥n general
app.use('/api/admin', adminRoutes);

// Rutas de usuarios
app.use('/api/users', usersRoutes);

// Rutas de base de conocimiento
app.use('/api/knowledge', knowledgeRoutes);

// Rutas de setup y administraci√≥n
app.use('/api/setup', setupRoutes);

// Rutas de clientes (multi-cliente)
app.use('/api/clients', clientsRoutes);

// Rutas de dashboard por cliente
app.use('/api/clients', dashboardRoutes);

// Rutas de conversaciones
app.use('/api/conversations', conversationsRoutes);

// ====== CONTROL SOLO POR CONVERSACI√ìN DE IA ======
const iaConversationStatus = {}

// Solo endpoint para activar/desactivar IA por conversaci√≥n
app.post('/api/ia/:clientId/:phone/toggle', (req, res) => {
  const { clientId, phone } = req.params;
  const key = `${clientId}:${phone}`;
  iaConversationStatus[key] = req.body.enabled !== undefined ? req.body.enabled : !iaConversationStatus[key];
  res.json({ success: true, clientId, phone, iaEnabled: iaConversationStatus[key] });
});

// Endpoint para consultar si la IA est√° activa en una conversaci√≥n
app.get('/api/ia/:clientId/:phone/status', (req, res) => {
  const { clientId, phone } = req.params;
  const key = `${clientId}:${phone}`;
  const iaEnabled = iaConversationStatus[key] !== undefined ? iaConversationStatus[key] : true;
  res.json({ success: true, clientId, phone, iaEnabled });
});

// Rutas de estad√≠sticas (mantener compatibilidad)
app.use('/api/stats', statsRoutes);

// ========== RUTAS ADICIONALES ==========

// Health check
app.get('/api/health', (req, res) => {
  res.json({
    success: true,
    status: 'OK',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development',
    database: database.isConnected() ? 'connected' : 'disconnected'
  });
});

// Env√≠o manual de mensajes - MEJORADO para guardar en BD
app.post('/api/send-message', async (req, res) => {
  try {
    const { to, message } = req.body;

    // Validaci√≥n de datos
    if (!to || !message) {
      return res.status(400).json({
        success: false,
        error: 'Los campos "to" y "message" son requeridos'
      });
    }

    // Normalizar n√∫mero de tel√©fono
    const formattedTo = to.startsWith('whatsapp:') ? to : `whatsapp:${to}`;
    
    console.log(`üì§ Enviando mensaje manual a ${formattedTo}: "${message}"`);

    // IMPORTANTE: Para WhatsApp Sandbox, usar el n√∫mero sandbox correcto
    const whatsappSandboxNumber = 'whatsapp:+14155238886'; // N√∫mero sandbox de Twilio
    
    // Buscar cliente MarketTech por su n√∫mero de Twilio
    let marketTechClient = await Client.findByTwilioNumber('+14155238886');
    
    if (!marketTechClient) {
      console.log('üè¢ Cliente MarketTech no encontrado, creando...');
      marketTechClient = await Client.createDefaultMarketTech();
    }

    console.log(`üîÑ Enviando via Twilio WhatsApp desde ${whatsappSandboxNumber} hacia ${formattedTo}`);
    console.log(`üìù Contenido: "${message}"`);

    // IMPORTANTE: Verificar que el n√∫mero destino est√© en formato WhatsApp correcto
    if (!formattedTo.startsWith('whatsapp:')) {
      throw new Error('N√∫mero destino debe usar formato whatsapp:+n√∫mero');
    }

    // Enviar mensaje v√≠a Twilio WhatsApp API
    const messageResponse = await twilioClient.messages.create({
      from: whatsappSandboxNumber,  // whatsapp:+14155238886 (sandbox)
      to: formattedTo,             // whatsapp:+573012508805
      body: message,
      // Opcional: agregar metadata para tracking
      statusCallback: process.env.TWILIO_WEBHOOK_URL || undefined
    });

    console.log(`‚úÖ Mensaje enviado via Twilio: SID=${messageResponse.sid}, Status=${messageResponse.status}`);

    // Guardar mensaje en la base de datos usando ConversationService
    try {
      const savedResult = await ConversationService.sendMessage(
        formattedTo,
        marketTechClient._id,
        message,
        'manual', // Tipo de mensaje: manual
        {
          twilioSid: messageResponse.sid,
          source: 'admin_panel',
          timestamp: new Date()
        }
      );
      
      console.log(`üíæ Mensaje manual guardado en BD: ${savedResult.message._id} para cliente ${marketTechClient.name}`);
      
      // Respuesta exitosa con datos completos
      res.json({
        success: true,
        message: 'Mensaje enviado y guardado exitosamente',
        data: {
          twilioSid: messageResponse.sid,
          clientId: marketTechClient._id,
          clientName: marketTechClient.name,
          savedToDatabase: true,
          messageId: savedResult.message._id,
          conversationId: savedResult.conversation._id
        }
      });
      
    } catch (dbError) {
      console.error('‚ùå Error guardando mensaje en BD:', dbError);
      // El mensaje se envi√≥ pero no se guard√≥ - responder con advertencia
      res.json({
        success: true,
        message: 'Mensaje enviado exitosamente (advertencia: no se guard√≥ en BD)',
        twilioSid: messageResponse.sid,
        warning: 'No se pudo guardar en la base de datos: ' + dbError.message,
        savedToDatabase: false
      });
    }

  } catch (error) {
    console.error('‚ùå Error enviando mensaje:', error);
    res.status(500).json({
      success: false,
      error: 'Error enviando mensaje: ' + error.message
    });
  }
});

// Env√≠o de mensajes con cliente espec√≠fico (endpoint mejorado)
app.post('/api/messages/send', async (req, res) => {
  try {
    const { to, message, clientId, twilioNumber = '+14155238886' } = req.body;

    // Validaci√≥n de datos
    if (!to || !message) {
      return res.status(400).json({
        success: false,
        error: 'Los campos "to" y "message" son requeridos'
      });
    }

    // Buscar cliente
    let client;
    if (clientId) {
      client = await Client.findById(clientId);
    } else {
      client = await Client.findByTwilioNumber(twilioNumber);
    }
    
    if (!client) {
      return res.status(404).json({
        success: false,
        error: 'Cliente no encontrado para el n√∫mero de Twilio especificado'
      });
    }

    // Normalizar n√∫mero de tel√©fono
    const formattedTo = to.startsWith('whatsapp:') ? to : `whatsapp:${to}`;
    const formattedFrom = client.twilioPhoneNumber.startsWith('whatsapp:') 
      ? client.twilioPhoneNumber 
      : `whatsapp:${client.twilioPhoneNumber}`;
    
    console.log(`üì§ Enviando mensaje desde ${client.name} (${formattedFrom}) a ${formattedTo}`);

    // Enviar mensaje v√≠a Twilio
    const messageResponse = await twilioClient.messages.create({
      from: formattedFrom,
      to: formattedTo,
      body: message
    });

    console.log(`‚úÖ Mensaje enviado via Twilio: ${messageResponse.sid}`);

    // Guardar mensaje en la base de datos
    const savedResult = await ConversationService.sendMessage(
      formattedTo,
      client._id,
      message,
      'manual',
      {
        twilioSid: messageResponse.sid,
        source: 'api_manual',
        timestamp: new Date()
      }
    );

    console.log(`üíæ Mensaje guardado en BD para cliente ${client.name}: ${savedResult.message._id}`);

    res.json({
      success: true,
      message: 'Mensaje enviado exitosamente',
      data: {
        twilioSid: messageResponse.sid,
        clientId: client._id,
        clientName: client.name,
        messageId: savedResult.message._id,
        conversationId: savedResult.conversation._id,
        savedToDatabase: true
      }
    });
  } catch (error) {
    console.error('‚ùå Error enviando mensaje:', error);
    res.status(500).json({
      success: false,
      error: 'Error enviando mensaje: ' + error.message
    });
  }
});

// Consultar IA directamente
app.post('/api/ask-ai', async (req, res) => {
  try {
    const { question, context } = req.body;

    if (!question) {
      return res.status(400).json({
        success: false,
        error: 'La pregunta es requerida'
      });
    }

    const response = await preguntarIA(question, context);

    res.json({
      success: true,
      question,
      response,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error consultando IA:', error);
    res.status(500).json({
      success: false,
      error: 'Error consultando IA: ' + error.message
    });
  }
});

// Env√≠o manual de SMS (sin verificaci√≥n WhatsApp)  
app.post('/api/send-sms', async (req, res) => {
  try {
    const { to, message } = req.body;
    if (!to || !message) {
      return res.status(400).json({ success: false, error: 'Campos requeridos: to, message' });
    }

    const formattedTo = to.startsWith('+') ? to : `+${to.replace(/\D/g, '')}`;
    const twilioSmsNumber = '+15017122661'; // N√∫mero SMS de Twilio
    
    const messageResponse = await twilioClient.messages.create({
      from: twilioSmsNumber,
      to: formattedTo,
      body: message
    });

    res.json({
      success: true,
      message: 'SMS enviado exitosamente',
      twilioSid: messageResponse.sid,
      type: 'SMS',
      from: twilioSmsNumber,
      to: formattedTo
    });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

// ========== INICIO DEL SERVIDOR ==========

const PORT = process.env.PORT || 3000;

async function startServer() {
  try {
    console.log('üîå Conectando a MongoDB...');
    await database.connect();
    console.log('‚úÖ Conectado a MongoDB exitosamente');

    // Asegurar que MarketTech existe
    await ensureMarketTechExists();

    app.listen(PORT, () => {
      console.log(`üöÄ Servidor corriendo en puerto ${PORT}`);
      console.log(`üåê URL local: http://localhost:${PORT}`);
      console.log(`üì° Webhook URL: http://localhost:${PORT}/webhook`);
      console.log('‚úÖ Sistema multi-cliente inicializado');
    });
  } catch (error) {
    console.error('‚ùå [APP.JS] Error fatal al cargar servidor:', error.message);
    console.error('Stack trace:', error.stack);
    process.exit(1);
  }
}

startServer();
